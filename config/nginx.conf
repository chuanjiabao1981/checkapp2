#user  nobody;
worker_processes  1;


events {
    worker_connections  1024;
}


http {
    upload_progress proxied 1m;
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    tcp_nopush     off;

    #keepalive_timeout  0;
    keepalive_timeout  65;


    gzip on;
    gzip_http_version 1.0;
    gzip_proxied any;
    gzip_min_length 500;
    gzip_disable "MSIE [1-6]\.";
    gzip_types text/plain text/html text/xml text/css
             text/comma-separated-values
             text/javascript application/x-javascript
             application/atom+xml;
    upstream app_server {
      server localhost:8080 fail_timeout=20;
    }

    server {
        client_max_body_size 10m;

        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
	      root /Users/guowei/project/ruby/checkapp2/public/;
	      try_files $uri/index.html $uri.html $uri @app;

        location @app {
          if ($request_method = DELETE ) {
                    proxy_pass http://app_server;
          }
	      	# an HTTP header important enough to have its own Wikipedia entry:
      		#   http://en.wikipedia.org/wiki/X-Forwarded-For
	      	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      		# enable this if you forward HTTPS traffic to unicorn,
      		# this helps Rack set the proper URL scheme for doing redirects:
      		# proxy_set_header X-Forwarded-Proto $scheme;

     		  # pass the Host: header from the client right along so redirects
      	  # can be set properly within the Rack application
          proxy_set_header Host $http_host;

          # we don't want nginx trying to do something clever with
          # redirects, we set the Host: header above already.
          proxy_redirect off;

          # set "proxy_buffering off" *only* for Rainbows! when doing
          # Comet/long-poll/streaming.  It's also safe to set if you're using
          # only serving fast clients with Unicorn + nginx, but not slow
          # clients.  You normally want nginx to buffer responses to slow
          # clients, even with Rails 3.1 streaming because otherwise a slow
          # client can become a bottleneck of Unicorn.
          #
          # The Rack application may also set "X-Accel-Buffering (yes|no)"
          # in the response headers do disable/enable buffering on a
          # per-response basis.
          # proxy_buffering off;

          proxy_pass http://app_server;
        }
        location ~ '/images$' {
          if ($request_method = GET ) {
                    proxy_pass http://app_server;
          }
          # Pass altered request body to this location
          upload_pass   @app;
          # Store files to this directory
          # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist
          upload_store /tmp 1;
        
          # Allow uploaded files to be read only by user
          upload_store_access user:rw group:rw all:r;

          # Set specified fields in request body
          upload_set_form_field original_name "$upload_file_name";
          upload_set_form_field content_type "$upload_content_type";
          upload_set_form_field filepath "$upload_tmp_path";

          # Inform backend about hash and size of a file
          upload_aggregate_form_field md5 "$upload_file_md5";

          upload_pass_form_field ".*";

          upload_cleanup 400 404 499 500-505;
          track_uploads proxied 30s;
        }
        location ^~ /progress {
            # report uploads tracked in the 'proxied' zone
            upload_progress_json_output;
            report_uploads proxied;
        }
        error_page 500 502 503 504 /500.html;

    }
}
